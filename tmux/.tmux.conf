# cat << EOF > /dev/null

# plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'christoomey/vim-tmux-navigator'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
#set -g @plugin 'Morantron/tmux-fingers'

set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'kristijanhusak/tmux-simple-git-status'

## GENERAL -------------------------------------------------------------------
## set the default TERM
set -g default-terminal 'tmux-256color'
set -g default-command ${SHELL}
set -ga terminal-overrides ",*256col*:Tc"

# update the TERM variable of terminal emulator when creating a new session or attaching a existing session
set -g update-environment 'DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM'
setw -g xterm-keys on

# faster command sequences
set -s escape-time 0

# Vim style
set-option -g status-keys vi
setw -g mode-keys vi

# expect UTF-8 (tmux < 2.2)
set -q -g status-utf8 on
setw -q -g utf8 on

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# edit configuration
bind e new-window -n '~/.tmux.conf.local' "sh -c '\${EDITOR:-nvim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# reload configuration
bind r source-file ~/.tmux.conf \; display ' Reloaded config'

## PLUGINS-conf -------------------------------------------------------------------
# tmux-resurrect
# for neovim
set -g @resurrect-strategy-nvim 'session'

# tmux-copycat
set -g @copycat_search 'M-/'

# tmux-continuum
# set -g @continuum-restore 'on'
set -g @continuum-save-interval '1'

## DISPLAY -------------------------------------------------------------------
# start windows numbering at 1
set -g base-index 1

# make pane numbering consistent with windows
setw -g pane-base-index 1

# rename window to reflect current program
setw -g automatic-rename off
# renumber windows when a window is closed
set -g renumber-windows on

# set terminal title
set-option -g set-titles on
set-option -g set-titles-string "#(whoami)@#H: $PWD \"#S\" (#W)#F [#I:#P]"

# slightly longer pane indicators display time
set -g display-panes-time 800

# slightly longer status messages display time
set -g display-time 1000

# redraw status line every 1 second
set -g status-interval 1

# clear both screen and history
bind C-l send-keys C-l

# activity
set -g monitor-activity on
set -g visual-activity off

## NAVIGATION ----------------------------------------------------------------
# create session
bind C-c new-session

# find session and navigation
bind C-s command-prompt -p find-session 'switch-client -t %%'

# split current window horizontally
bind - split-window -v
# split current window vertically
bind / split-window -h

# use alt (option) + number to switch window.
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# swap current pane with the next/previous one
bind > swap-pane -D
bind < swap-pane -U

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r h previous-window # select previous window
bind -r l next-window     # select next window
bind Tab last-window      # move to last active window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

## COPY MODE -----------------------------------------------------------------
# enter copy mode
bind Enter copy-mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'


## buffers -------------------------------------------------------------------
bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

## user defined overrides ----------------------------------------------------
if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'

# --------------------
# Status Bar
# --------------------
# loud or quiet?
set -g focus-events on
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

set -g status on
set -g status-position bottom
set -g status-bg "#2d2a2e"
set -g status-fg white

# left portion of status bar.
set -g  status-left "#[bold]#{prefix_highlight}"
set -ga status-left "#[fg=colour255,bg=colour235,bold] ###S #[fg=colour235,bg=default,none]"
set -g  status-left-length 50

# right portion of status bar.
set -g  status-right "#[fg=colour235]#[bg=colour235,fg=colour255,bold]"
set -ga status-right "#{?window_zoomed_flag, z,}"

set -ga status-right "#[bg=colour235,fg=colour255,none]"
set -ga status-right " ⇅ #(~/.tmux/scripts/username.sh)"
set -ga status-right "#[fg=colour255,bg=colour235,none]"
set -ga status-right "@#(~/.tmux/scripts/hostname.sh) "

set -ga status-right "#[fg=colour236]#[bg=colour236,fg=colour255,none]"
set -ga status-right " ⎇ #{simple_git_status} "

set -ga status-right "#[fg=colour235]#[bg=colour235,fg=colour255] "
set -ga status-right "⧖ #(date '+%b %d, %H:%M') "
set -g  status-right-length 80

# Middle portion of status bar (window list).
# Attributes: bright/bold, dim, underscore, blink, reverse, hidden, italics
# Base index starts from 1 instead of 0.
set -g status-justify left
set -g base-index 1
set -g window-status-separator ""

# active window.
set -g  window-status-current-format "#[fg=#2d2a2e,bg=brightgreen]#[fg=#2d2a2e,bg=brightgreen,bold] "
set -ga window-status-current-format "#I #[none] #[bold]#W#F #[fg=brightgreen,bg=default,none]"

# inactive window
set -g window-status-format "#[fg=colour255,bg=default] #I:#W "

set -g window-status-bell-style "fg=#2d2a2e,bg=brightred"
set -g window-status-activity-style "fg=#2d2a2e,bg=brightred"

# text highlight on Copy mode
setw -g clock-mode-colour brightyellow
set  -g mode-style "fg=#2d2a2e,bg=brightyellow"

# panes
# set inactive/active window styles
set -g window-style fg='#727072',bg='#383539',none
set -g window-active-style fg='#ffffff',bg='#2d2a2e',none

set -ag pane-border-style fg='#221f22',bg='#2d2a2e',none
set -ag pane-active-border-style fg='#221f22',bg='#2d2a2e',none

# pane numbers
set -g display-panes-colour "white"
set -g display-panes-active-colour "red"

# messages
set -g message-style "fg=#2d2a2e,bg=brightgreen,bold"

# Plugins config
set -g @fingers-skip-health-check '1'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=#2d2a2e,bg=brightyellow,bold'
set -g @prefix_highlight_fg '#2d2a2e' # default is 'colour231'
set -g @prefix_highlight_bg 'brightblue'  # default is 'colour04'


run '~/.tmux/plugins/tpm/tpm'

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
#     window=${window%.*}
#
#     retry=10
#     while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.05
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     new_pane=$(tmux display -t "$window" -p '#{pane_id}')
#     tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \; display " mouse: $new"
# }
#
# "$@"
